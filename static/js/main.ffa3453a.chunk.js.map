{"version":3,"sources":["resources/Colors.ts","resources/Sizes.ts","resources/Strings.ts","components/Block.tsx","components/Text.tsx","resources/Fonts.ts","components/Link.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","Sizes","em","concat","h1","h2","h3","h4","h5","h6","Strings","Block","props","blockStyle","Object","assign","styles","block","center","style","react_default","a","createElement","children","display","justifyContent","alignItems","flexDirection","Text","textStyle","text","title","userSelect","noUserSelect","bold","fontWeight","fontFamily","fontSize","color","lineHeight","letterSpacing","textIndent","msUserSelect","MozUserSelect","KhtmlUserSelect","WebkitUserSelect","Link","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleFocusing","setState","focusing","_handleStopFocusing","render","linkStyle","link","state","hovering","anchor","href","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","Text_Text","inherits","Component","textDecoration","app","width","height","App","Block_Block","Link_Link","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffa3453a.chunk.js","sourcesContent":["export const Colors = {\n  black: '#000',\n  white: '#fff',\n  gray: '#777',\n  lightGray: '#bbb',\n  primary: '#f57',\n};","const em = 18;\n\nexport const Sizes = {\n  em: `${em}px`,\n  h1: `${2 * em}px`,\n  h2: `${1.5 * em}px`,\n  h3: `${1.17 * em}px`,\n  h4: `${em}px`,\n  h5: `${0.83 * em}px`,\n  h6: `${0.75 * em}px`,\n};","export const Strings = {\n  email: 'info@xcvrsion.com',\n  subtitle: 'A virtual reality company',\n  title: 'XCVRSION',\n};","import React, { FunctionComponent, CSSProperties } from \"react\";\r\n\r\nexport interface IBlockProps {\r\n  center?: boolean;\r\n  style?: CSSProperties;\r\n}\r\n\r\nexport const Block: FunctionComponent<IBlockProps> = (props) => {\r\n  const blockStyle = Object.assign({},\r\n    styles.block,\r\n    props.center && styles.center,\r\n    props.style,\r\n  );\r\n\r\n  return (\r\n    <div style={blockStyle}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  block: {\r\n  } as CSSProperties,\r\n  center: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n  }\r\n};","import React, { FunctionComponent, CSSProperties } from 'react';\nimport { Sizes, Colors, Fonts } from '../resources';\n\nexport interface ITextProps {\n  title?: boolean;\n  bold?: boolean;\n  h1?: boolean;\n  h2?: boolean;\n  h3?: boolean;\n  h4?: boolean;\n  h5?: boolean;\n  h6?: boolean;\n  userSelect?: boolean;\n  style?: CSSProperties;\n}\n\nexport const Text: FunctionComponent<ITextProps> = (props) => {\n  const textStyle = Object.assign({},\n    styles.text,\n    props.title && styles.title,\n    props.h1 && styles.h1,\n    props.h2 && styles.h2,\n    props.h3 && styles.h3,\n    props.h4 && styles.h4,\n    props.h5 && styles.h5,\n    props.h6 && styles.h6,\n    !props.userSelect && styles.noUserSelect,\n    props.bold && styles.bold,\n    props.style,\n  );\n\n  return (\n    <div style={textStyle}>\n      {props.children}\n    </div>\n  );\n};\n\nconst styles = {\n  bold: {\n    fontWeight: 700,\n  } as CSSProperties,\n  text: {\n    fontFamily: Fonts.sans,\n    fontSize: Sizes.em,\n    color: Colors.gray,\n    lineHeight: 2,\n    fontWeight: 300,\n  } as CSSProperties,\n  title: {\n    color: Colors.black,\n    letterSpacing: '2.5vw',\n    textIndent: '2.5vw',\n    fontSize: '9vw',\n    fontWeight: 700,\n  } as CSSProperties,\n  noUserSelect: {\n    userSelect: 'none',\n    msUserSelect: 'none',\n    MozUserSelect: 'none',\n    KhtmlUserSelect: 'none',\n    WebkitUserSelect: 'none',\n  } as CSSProperties,\n  h1: {\n    fontSize: Sizes.h1,\n  } as CSSProperties,\n  h2: {\n    fontSize: Sizes.h2,\n  } as CSSProperties,\n  h3: {\n    fontSize: Sizes.h3,\n  } as CSSProperties,\n  h4: {\n    fontSize: Sizes.h4,\n  } as CSSProperties,\n  h5: {\n    fontSize: Sizes.h5,\n  } as CSSProperties,\n  h6: {\n    fontSize: Sizes.h6,\n  } as CSSProperties,\n};","export const Fonts = {\n  sans: 'Roboto, sans-serif',\n};","import React, { CSSProperties, Component } from 'react';\nimport { ITextProps, Text } from './Text';\nimport { Colors } from '../resources';\n\nexport interface ILinkProps extends ITextProps {\n  href: string;\n}\n\nexport interface ILinkState {\n  focusing: boolean;\n}\n\nexport class Link extends Component<ILinkProps, ILinkState> {\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    this.state = {\n      focusing: false,\n    };\n  }\n\n  private _handleFocusing = () => {\n    this.setState({ focusing: true });\n  }\n\n  private _handleStopFocusing = () => {\n    this.setState({ focusing: false });\n  }\n\n  render = () => {\n    const linkStyle = Object.assign({},\n      styles.link,\n      this.props.style,\n      this.state.focusing && styles.hovering,\n    );\n\n    return (\n      <a\n        style={styles.anchor}\n        href={this.props.href}\n        onMouseOver={this._handleFocusing}\n        onMouseOut={this._handleStopFocusing}\n        onTouchStart={this._handleFocusing}\n        onTouchEnd={this._handleStopFocusing}>\n        <Text userSelect style={linkStyle} {...this.props}>\n          {this.props.children}\n        </Text>\n      </a>\n    );\n  }\n};\n\nconst styles = {\n  anchor: {\n    textDecoration: 'none',\n  } as CSSProperties,\n  hovering: {\n    color: Colors.primary,\n    textDecoration: 'underline',\n  } as CSSProperties,\n  link: {\n    color: Colors.black,\n  } as CSSProperties,\n};","import React, { FunctionComponent, CSSProperties } from 'react';\nimport { Strings } from './resources';\nimport { Text, Link, Block } from './components';\n\nconst App: FunctionComponent = () => {\n  return (\n    <Block center style={styles.app}>\n      <Text title>\n        {Strings.title}\n      </Text>\n      <Text>\n        {Strings.subtitle}\n      </Text>\n      <Link href={`mailto:${Strings.email}`}>\n        {Strings.email}\n      </Link>\n    </Block>\n  );\n}\n\nconst styles = {\n  app: {\n    width: '100%',\n    height: '100vh',\n  } as CSSProperties,\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}