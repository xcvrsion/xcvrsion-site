{"version":3,"sources":["resources/images/phone.png","resources/images/xcvrsion-app-main.png","resources/Colors.ts","resources/images/index.ts","components/AppDemo.tsx","components/Text.tsx","components/Button.tsx","components/Link.tsx","components/ListItem.tsx","components/Section.tsx","components/SectionItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Colors","Images","phone","require","xcvrsionAppMain","AppDemo","props","react_default","a","createElement","style","styles","appDemo","src","alt","app","position","width","top","left","Text","combinedStyles","Object","assign","text","h1","h2","center","children","color","fontWeight","textAlign","Button","innerWidth","useWindowSize","combinedStyle","button","combinedTitleStyle","title","titleMobile","titleStyle","className","Text_Text","userSelect","fontSize","marginLeft","backgroundColor","padding","borderRadius","cursor","display","alignItems","justifyContent","Link","link","noUnderline","href","textDecoration","ListItem","index_esm","size","Section","combinedClassName","join","contentStyle","SectionItem","sectionItem","sectionItemMobile","App","Section_Section","SectionItem_SectionItem","Link_Link","gridTemplateRows","gridGap","gridTemplateColumns","Button_Button","AppDemo_AppDemo","height","ListItem_ListItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e980461a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone.27011c9f.png\";","module.exports = __webpack_public_path__ + \"static/media/xcvrsion-app-main.4e7b91d5.png\";","export const Colors = {\r\n  accent: 'rgb(88,86,214)',\r\n  accent2: 'rgb(255,45,85)',\r\n  primary: 'rgb(0,0,0)',          // accent, bold text\r\n  darkGray: 'rgb(152,152,157)',   // main text\r\n  midGray: 'rgb(174,174,178)',    // disabled\r\n  lightGray: 'rgb(242,242,247)',  // borders\r\n  white: 'rgb(255,255,255)',      // background\r\n};","export const Images = {\r\n  phone: require('./phone.png'),\r\n  xcvrsionAppMain: require('./xcvrsion-app-main.png'),\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport { Images } from '../resources';\r\n\r\nexport const AppDemo: FC = (props) => {\r\n  return (\r\n    <div style={styles.appDemo}>\r\n      <img src={Images.phone} style={styles.phone} alt={'phone'} />\r\n      <img src={Images.xcvrsionAppMain} style={styles.app} alt={'app-demo'} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  appDemo: {\r\n    position: 'relative',\r\n  } as CSSProperties,\r\n  phone: {\r\n    width: '100%',\r\n  } as CSSProperties,\r\n  app: {\r\n    position: 'absolute',\r\n    top: '8.452250274%',\r\n    left: '15.166340509%',\r\n    width: '68.395303327%',\r\n  } as CSSProperties,\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport { Colors } from '../resources';\r\n\r\nexport interface ITextProps {\r\n  style?: CSSProperties;\r\n  h1?: boolean;\r\n  h2?: boolean;\r\n  p?: boolean;\r\n  center?: boolean;\r\n}\r\n\r\nexport const Text: FC<ITextProps> = (props) => {\r\n  const combinedStyles = Object.assign({},\r\n    styles.text,\r\n    props.h1 && styles.h1,\r\n    props.h2 && styles.h2,\r\n    props.p && styles.p,\r\n    props.center && styles.center,\r\n    props.style,\r\n  );\r\n\r\n  if (props.h1) {\r\n    return (\r\n      <h1 style={combinedStyles}>\r\n        {props.children}\r\n      </h1>\r\n    );\r\n  }\r\n\r\n  if (props.h2) {\r\n    return (\r\n      <h2 style={combinedStyles}>\r\n        {props.children}\r\n      </h2>\r\n    );\r\n  }\r\n\r\n  if (props.p) {\r\n    return (\r\n      <p style={combinedStyles}>\r\n        {props.children}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={combinedStyles}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  text: {\r\n    color: Colors.darkGray,\r\n  } as CSSProperties,\r\n  h1: {\r\n    color: Colors.primary,\r\n  } as CSSProperties,\r\n  h2: {\r\n    color: Colors.primary,\r\n    fontWeight: 300,\r\n  } as CSSProperties,\r\n  p: {\r\n    // N/A\r\n  } as CSSProperties,\r\n  center: {\r\n    textAlign: 'center',\r\n  } as CSSProperties,\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport { Colors } from '../resources';\r\nimport { Text } from './Text';\r\nimport useWindowSize from '@rehooks/window-size';\r\nimport './Button.css';\r\n\r\nexport interface IButtonProps {\r\n  href?: string;\r\n  title?: string;\r\n  style?: CSSProperties;\r\n  titleStyle?: CSSProperties;\r\n}\r\n\r\nexport const Button: FC<IButtonProps> = (props) => {\r\n  const { innerWidth } = useWindowSize();\r\n\r\n  const combinedStyle = Object.assign({},\r\n    styles.button,\r\n    props.style,\r\n  );\r\n\r\n  const combinedTitleStyle = Object.assign({},\r\n    styles.title,\r\n    (innerWidth <= 450) && styles.titleMobile,\r\n    props.titleStyle,\r\n  );\r\n\r\n  return (\r\n    <div className={'Button'} style={combinedStyle}>\r\n      {props.children}\r\n      <Text style={combinedTitleStyle}>\r\n        {props.title}\r\n      </Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  title: {\r\n    color: Colors.white,\r\n    userSelect: 'none',\r\n    fontSize: '0.7rem',\r\n    marginLeft: '0.5rem',\r\n    fontWeight: 'bold',\r\n  } as CSSProperties,\r\n  titleMobile: {\r\n    fontSize: '1rem',\r\n  } as CSSProperties,\r\n  button: {\r\n    color: Colors.white,\r\n    backgroundColor: Colors.accent,\r\n    padding: '0.5rem 0.25rem 0.5rem 0.25rem',\r\n    borderRadius: '1rem',\r\n    cursor: 'pointer',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  } as CSSProperties,\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport { Colors } from '../resources';\r\n\r\nexport interface ILinkProps {\r\n  style?: CSSProperties;\r\n  href?: string;\r\n  noUnderline?: boolean;\r\n}\r\n\r\nexport const Link: FC<ILinkProps> = (props) => {\r\n  const combinedStyle = Object.assign({},\r\n    styles.link,\r\n    props.noUnderline && styles.noUnderline,\r\n    props.style,\r\n  );\r\n\r\n  return (\r\n    <a style={combinedStyle} href={props.href}>\r\n      {props.children}\r\n    </a>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  link: {\r\n    color: Colors.accent,\r\n  } as CSSProperties,\r\n  noUnderline: {\r\n    textDecoration: 'none',\r\n  } as CSSProperties,\r\n}","import React, { FC, CSSProperties } from 'react';\r\nimport { FaCheck } from 'react-icons/fa';\r\nimport './ListItem.css';\r\nimport { Colors } from '../resources';\r\n\r\nexport interface IListItemProps {\r\n  style?: CSSProperties;\r\n}\r\n\r\nexport const ListItem: FC<IListItemProps> = (props) => {\r\n  return (\r\n    <div className={'ListItem'} style={props.style}>\r\n      <FaCheck size={18} color={Colors.accent} />\r\n      {props.children}\r\n    </div >\r\n  );\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport './Section.css';\r\n\r\nexport interface ISectionProps {\r\n  style?: CSSProperties;\r\n  contentStyle?: CSSProperties;\r\n  className?: string;\r\n}\r\n\r\nexport const Section: FC<ISectionProps> = (props) => {\r\n  const combinedClassName = ['Section', props.className].join(' ');\r\n\r\n  return (\r\n    <div className={combinedClassName} style={props.style}>\r\n      <div className={'SectionContent'} style={props.contentStyle}>\r\n        {props.children}\r\n      </div >\r\n    </div>\r\n  );\r\n};","import React, { FC, CSSProperties } from 'react';\r\nimport './SectionItem.css';\r\nimport useWindowSize from '@rehooks/window-size';\r\n\r\nexport interface ISectionItemProps {\r\n  style?: CSSProperties;\r\n}\r\n\r\nexport const SectionItem: FC<ISectionItemProps> = (props) => {\r\n  const { innerWidth } = useWindowSize();\r\n\r\n  const combinedStyles = Object.assign({},\r\n    styles.sectionItem,\r\n    (innerWidth <= 800) && styles.sectionItemMobile,\r\n    props.style,\r\n  );\r\n\r\n  return (\r\n    <div className='SectionItem' style={combinedStyles}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  sectionItem: {\r\n    padding: '2rem',\r\n  } as CSSProperties,\r\n  sectionItemMobile: {\r\n    padding: '1rem',\r\n  } as CSSProperties,\r\n};","import React, { FC } from 'react';\r\nimport { Section, SectionItem, ListItem, Text, Button, AppDemo } from './components';\r\nimport { FaVrCardboard, FaHandsHelping, FaGooglePlay, FaApple } from 'react-icons/fa';\r\nimport './App.css';\r\nimport { Colors } from './resources';\r\nimport { Link } from './components/Link';\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <div className={'App'}>\r\n      <Section>\r\n        <SectionItem>\r\n          <Link noUnderline href={'https://xcvrsion.com'} style={{ fontWeight: 700 }}>\r\n            {'Xcvrsion'}\r\n          </Link>\r\n        </SectionItem>\r\n      </Section>\r\n\r\n      <Section className={'IntroSection'}>\r\n        <SectionItem style={{ gridTemplateRows: '0fr 0fr 0fr' }}>\r\n          <Text h1>\r\n            {'Tour like never before, quicker than ever.'}\r\n          </Text>\r\n          <Text p>\r\n            {'Take a virtual trip to your favorite university, a home of interest, or the latest concert.'}\r\n          </Text>\r\n          <div style={{ width: '100%', display: 'grid', gridGap: '1rem', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>\r\n            <Button title={'Get it on the App Store'} href=''>\r\n              <FaApple size={18} />\r\n            </Button>\r\n            <Button title={'Get it on the Play Store'} href=''>\r\n              <FaGooglePlay size={18} />\r\n            </Button>\r\n          </div>\r\n        </SectionItem>\r\n        <SectionItem>\r\n          <AppDemo />\r\n        </SectionItem>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionItem>\r\n          <Text h1 center>\r\n            {'Let\\'s talk business.'}\r\n          </Text>\r\n        </SectionItem>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionItem style={{ gridTemplateRows: '0fr 0fr 0fr' }}>\r\n          <div style={{ gridGap: '1rem', width: '100%', display: 'grid', gridTemplateColumns: '0fr auto', alignItems: 'center' }}>\r\n            <div style={{ backgroundColor: Colors.accent, width: 32, height: 32, padding: '16px', borderRadius: '100%' }}>\r\n              <FaVrCardboard color={Colors.lightGray} size={32} />\r\n            </div>\r\n            <Text h2>\r\n              {'Share your world.'}\r\n            </Text>\r\n          </div>\r\n          <div>\r\n            <ListItem>\r\n              <Text p>\r\n                {'We provide the headsets, content, and labor to make things happen.'}\r\n              </Text>\r\n            </ListItem>\r\n            <ListItem>\r\n              <Text p>\r\n                {'We make sure that everyone is able to join in on the experiences you desire.'}\r\n              </Text>\r\n            </ListItem>\r\n          </div>\r\n        </SectionItem>\r\n        <SectionItem style={{ gridTemplateRows: '0fr 0fr 0fr' }}>\r\n          <div style={{ gridGap: '1rem', width: '100%', display: 'grid', gridTemplateColumns: '0fr auto', alignItems: 'center' }}>\r\n            <div style={{ backgroundColor: Colors.accent2, width: 32, height: 32, padding: '16px', borderRadius: '100%' }}>\r\n              <FaHandsHelping color={Colors.lightGray} size={32} />\r\n            </div>\r\n            <Text h2>\r\n              {'We are on your team.'}\r\n            </Text>\r\n          </div>\r\n          <Text p>\r\n            {'Whether you are a university, real estate agency, music company, or another organization, we are here to help.'}\r\n          </Text>\r\n        </SectionItem>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionItem>\r\n          <Text p >\r\n            {'© Xcvrsion, Inc.'}\r\n          </Text>\r\n        </SectionItem>\r\n        <SectionItem>\r\n          <Link style={{ color: Colors.darkGray, textAlign: 'right', }} noUnderline href={'mailto:info@xcvrsion.com'}>\r\n            {'info@xcvrsion.com'}\r\n          </Link>\r\n        </SectionItem>\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // 'Content is cached for offline use.' message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}