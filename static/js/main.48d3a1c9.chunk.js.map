{"version":3,"sources":["resources/Colors.ts","resources/Sizes.ts","resources/Strings.ts","components/Text.tsx","resources/Fonts.ts","components/Link.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","Sizes","em","concat","h1","h2","h3","h4","h5","h6","Strings","Text","props","textStyle","Object","assign","styles","text","title","userSelect","noUserSelect","bold","style","react_default","a","createElement","children","fontWeight","fontFamily","fontSize","color","lineHeight","letterSpacing","textIndent","msUserSelect","MozUserSelect","KhtmlUserSelect","WebkitUserSelect","Link","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleFocusing","setState","focusing","_handleStopFocusing","render","linkStyle","link","state","hovering","anchor","href","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","Text_Text","inherits","Component","textDecoration","app","width","height","display","justifyContent","alignItems","flexDirection","App","Link_Link","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48d3a1c9.chunk.js","sourcesContent":["export const Colors = {\r\n  black: '#000',\r\n  white: '#fff',\r\n  gray: '#777',\r\n  lightGray: '#bbb',\r\n  primary: '#f57',\r\n};","const em = 18;\r\n\r\nexport const Sizes = {\r\n  em: `${em}px`,\r\n  h1: `${2 * em}px`,\r\n  h2: `${1.5 * em}px`,\r\n  h3: `${1.17 * em}px`,\r\n  h4: `${em}px`,\r\n  h5: `${0.83 * em}px`,\r\n  h6: `${0.75 * em}px`,\r\n};","export const Strings = {\r\n  email: 'business@xcvrsion.com',\r\n  subtitle: 'A virtual reality company',\r\n  title: 'XCVRSION',\r\n};","import React, { FunctionComponent, CSSProperties } from 'react';\r\nimport { Sizes, Colors, Fonts } from '../resources';\r\n\r\nexport interface ITextProps {\r\n  title?: boolean;\r\n  bold?: boolean;\r\n  h1?: boolean;\r\n  h2?: boolean;\r\n  h3?: boolean;\r\n  h4?: boolean;\r\n  h5?: boolean;\r\n  h6?: boolean;\r\n  userSelect?: boolean;\r\n  style?: CSSProperties;\r\n}\r\n\r\nexport const Text: FunctionComponent<ITextProps> = (props) => {\r\n  const textStyle = Object.assign({},\r\n    styles.text,\r\n    props.title && styles.title,\r\n    props.h1 && styles.h1,\r\n    props.h2 && styles.h2,\r\n    props.h3 && styles.h3,\r\n    props.h4 && styles.h4,\r\n    props.h5 && styles.h5,\r\n    props.h6 && styles.h6,\r\n    !props.userSelect && styles.noUserSelect,\r\n    props.bold && styles.bold,\r\n    props.style,\r\n  );\r\n\r\n  return (\r\n    <div style={textStyle}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  bold: {\r\n    fontWeight: 700,\r\n  } as CSSProperties,\r\n  text: {\r\n    fontFamily: Fonts.sans,\r\n    fontSize: Sizes.em,\r\n    color: Colors.gray,\r\n    lineHeight: 2,\r\n    fontWeight: 300,\r\n  } as CSSProperties,\r\n  title: {\r\n    color: Colors.black,\r\n    letterSpacing: '2.5vw',\r\n    textIndent: '2.5vw',\r\n    fontSize: '9vw',\r\n    fontWeight: 700,\r\n  } as CSSProperties,\r\n  noUserSelect: {\r\n    userSelect: 'none',\r\n    msUserSelect: 'none',\r\n    MozUserSelect: 'none',\r\n    KhtmlUserSelect: 'none',\r\n    WebkitUserSelect: 'none',\r\n  } as CSSProperties,\r\n  h1: {\r\n    fontSize: Sizes.h1,\r\n  } as CSSProperties,\r\n  h2: {\r\n    fontSize: Sizes.h2,\r\n  } as CSSProperties,\r\n  h3: {\r\n    fontSize: Sizes.h3,\r\n  } as CSSProperties,\r\n  h4: {\r\n    fontSize: Sizes.h4,\r\n  } as CSSProperties,\r\n  h5: {\r\n    fontSize: Sizes.h5,\r\n  } as CSSProperties,\r\n  h6: {\r\n    fontSize: Sizes.h6,\r\n  } as CSSProperties,\r\n};","export const Fonts = {\r\n  sans: 'Roboto, sans-serif',\r\n};","import React, { CSSProperties, Component } from 'react';\r\nimport { ITextProps, Text } from './Text';\r\nimport { Colors } from '../resources';\r\n\r\nexport interface ILinkProps extends ITextProps {\r\n  href: string;\r\n}\r\n\r\nexport interface ILinkState {\r\n  focusing: boolean;\r\n}\r\n\r\nexport class Link extends Component<ILinkProps, ILinkState> {\r\n\r\n  constructor(props: ILinkProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      focusing: false,\r\n    };\r\n  }\r\n\r\n  private _handleFocusing = () => {\r\n    this.setState({ focusing: true });\r\n  }\r\n\r\n  private _handleStopFocusing = () => {\r\n    this.setState({ focusing: false });\r\n  }\r\n\r\n  render = () => {\r\n    const linkStyle = Object.assign({},\r\n      styles.link,\r\n      this.props.style,\r\n      this.state.focusing && styles.hovering,\r\n    );\r\n\r\n    return (\r\n      <a\r\n        style={styles.anchor}\r\n        href={this.props.href}\r\n        onMouseOver={this._handleFocusing}\r\n        onMouseOut={this._handleStopFocusing}\r\n        onTouchStart={this._handleFocusing}\r\n        onTouchEnd={this._handleStopFocusing}>\r\n        <Text userSelect style={linkStyle} {...this.props}>\r\n          {this.props.children}\r\n        </Text>\r\n      </a>\r\n    );\r\n  }\r\n};\r\n\r\nconst styles = {\r\n  anchor: {\r\n    textDecoration: 'none',\r\n  } as CSSProperties,\r\n  hovering: {\r\n    color: Colors.primary,\r\n    textDecoration: 'underline',\r\n  } as CSSProperties,\r\n  link: {\r\n    color: Colors.black,\r\n  } as CSSProperties,\r\n};","import React, { FunctionComponent, CSSProperties } from 'react';\nimport { Strings } from './resources';\nimport { Text, Link } from './components';\n\nconst App: FunctionComponent = () => {\n  return (\n    <div style={styles.app}>\n      <Text title>\n        {Strings.title}\n      </Text>\n      <Text>{Strings.subtitle}</Text>\n      <Link href={`mailto:${Strings.email}`}>\n        {Strings.email}\n      </Link>\n    </div>\n  );\n}\n\nconst styles = {\n  app: {\n    width: '100%',\n    height: '100vh',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  } as CSSProperties,\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}